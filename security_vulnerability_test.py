#!/usr/bin/env python3
"""
Security Vulnerability Test
Tests the FIXED security issues in the authentication system
"""

import requests
import json
import random
from datetime import datetime

BASE_URL = "http://localhost:8000/api"

def print_section(title):
    print(f"\n{'='*70}")
    print(f"üîí {title}")
    print('='*70)

def print_test(test_name, success, details=""):
    status = "‚úÖ SECURE" if success else "üö® VULNERABLE"
    print(f"{status} {test_name}")
    if details:
        print(f"   ‚îî‚îÄ {details}")

def test_public_registration_vulnerability():
    """Test if public registration can create ADMIN accounts"""
    print_section("TESTING PUBLIC REGISTRATION SECURITY")
    
    # Attempt 1: Try to register with ADMIN role (OLD VULNERABILITY)
    admin_attempt = {
        "phone_number": f"99{random.randint(10000000, 99999999)}",
        "email": "hacker@badguy.com",
        "first_name": "Malicious",
        "last_name": "Hacker",
        "password": "hack123456",
        "password_confirm": "hack123456",
        "role": "ADMIN"  # This should be IGNORED by the server
    }
    
    response = requests.post(f"{BASE_URL}/auth/register/", json=admin_attempt)
    
    if response.status_code == 201:
        user_data = response.json()
        created_role = user_data['user']['role']
        
        if created_role == 'ADMIN':
            print_test("üö® CRITICAL VULNERABILITY", False, 
                      "Public registration created ADMIN account!")
            return False
        elif created_role == 'MEMBER':
            print_test("Public Registration Role Control", True, 
                      f"Role forced to MEMBER (sent: ADMIN, got: {created_role})")
        else:
            print_test("Public Registration Role Control", True, 
                      f"Unexpected role but not ADMIN: {created_role}")
    else:
        print_test("Public Registration", False, f"Registration failed: {response.status_code}")
        print(f"   Error: {response.text[:200]}")
    
    # Attempt 2: Try to register with SUB_ADMIN role
    subadmin_attempt = {
        "phone_number": f"98{random.randint(10000000, 99999999)}",
        "email": "another.hacker@badguy.com",
        "first_name": "Another",
        "last_name": "Hacker",
        "password": "hack123456",
        "password_confirm": "hack123456",
        "role": "SUB_ADMIN"  # This should also be IGNORED
    }
    
    response = requests.post(f"{BASE_URL}/auth/register/", json=subadmin_attempt)
    
    if response.status_code == 201:
        user_data = response.json()
        created_role = user_data['user']['role']
        
        if created_role in ['ADMIN', 'SUB_ADMIN']:
            print_test("üö® CRITICAL VULNERABILITY", False, 
                      f"Public registration created {created_role} account!")
            return False
        else:
            print_test("SUB_ADMIN Role Prevention", True, 
                      f"Role forced to {created_role} (attempted: SUB_ADMIN)")
    
    return True

def test_secure_admin_creation():
    """Test the secure admin creation endpoint"""
    print_section("TESTING SECURE ADMIN CREATION")
    
    # First, create a regular user
    member_data = {
        "phone_number": f"97{random.randint(10000000, 99999999)}",
        "email": "member@test.com",
        "first_name": "Regular",
        "last_name": "Member",
        "password": "member123456",
        "password_confirm": "member123456"
    }
    
    response = requests.post(f"{BASE_URL}/auth/register/", json=member_data)
    if response.status_code != 201:
        print_test("Member Registration for Test", False, "Could not create test member")
        return False
    
    # Login as the member
    login_data = {
        "phone_number": member_data["phone_number"],
        "password": "member123456"
    }
    
    response = requests.post(f"{BASE_URL}/auth/login-password/", json=login_data)
    if response.status_code != 200:
        print_test("Member Login for Test", False, "Could not login as member")
        return False
    
    member_token = response.json()["tokens"]["access"]
    headers = {"Authorization": f"Bearer {member_token}"}
    
    # Attempt to create ADMIN as a regular member (should fail)
    admin_data = {
        "phone_number": f"96{random.randint(10000000, 99999999)}",
        "email": "admin@test.com",
        "first_name": "Attempted",
        "last_name": "Admin",
        "password": "admin123456",
        "password_confirm": "admin123456"
    }
    
    response = requests.post(f"{BASE_URL}/admin/create-admin-user/", 
                           json=admin_data, headers=headers)
    
    if response.status_code == 403:
        print_test("ADMIN Creation Access Control", True, 
                  "Non-superuser correctly forbidden from creating ADMIN")
    elif response.status_code == 201:
        print_test("üö® CRITICAL VULNERABILITY", False, 
                  "Regular user was able to create ADMIN account!")
        return False
    else:
        print_test("ADMIN Creation Endpoint", False, 
                  f"Unexpected response: {response.status_code}")
    
    return True

def test_staff_creation_security():
    """Test staff creation security"""
    print_section("TESTING STAFF CREATION SECURITY")
    
    # Try to create staff without proper permissions
    member_data = {
        "phone_number": f"95{random.randint(10000000, 99999999)}",
        "email": "member2@test.com",
        "first_name": "Another",
        "last_name": "Member",
        "password": "member123456",
        "password_confirm": "member123456"
    }
    
    response = requests.post(f"{BASE_URL}/auth/register/", json=member_data)
    if response.status_code == 201:
        # Login as member
        login_data = {
            "phone_number": member_data["phone_number"],
            "password": "member123456"
        }
        
        response = requests.post(f"{BASE_URL}/auth/login-password/", json=login_data)
        if response.status_code == 200:
            member_token = response.json()["tokens"]["access"]
            headers = {"Authorization": f"Bearer {member_token}"}
            
            # Try to create staff (should fail)
            staff_data = {
                "phone_number": f"94{random.randint(10000000, 99999999)}",
                "email": "staff@test.com",
                "first_name": "Test",
                "last_name": "Staff",
                "password": "staff123456",
                "password_confirm": "staff123456"
            }
            
            response = requests.post(f"{BASE_URL}/admin/create-staff-user/", 
                                   json=staff_data, headers=headers)
            
            if response.status_code == 403:
                print_test("STAFF Creation Access Control", True, 
                          "MEMBER correctly forbidden from creating STAFF")
            else:
                print_test("üö® VULNERABILITY", False, 
                          f"MEMBER was able to access staff creation: {response.status_code}")
                return False
    
    return True

def test_approval_workflow():
    """Test that new members require approval"""
    print_section("TESTING MEMBER APPROVAL WORKFLOW")
    
    # Register new member
    member_data = {
        "phone_number": f"93{random.randint(10000000, 99999999)}",
        "email": "newmember@test.com",
        "first_name": "New",
        "last_name": "Member",
        "password": "newmember123456",
        "password_confirm": "newmember123456"
    }
    
    response = requests.post(f"{BASE_URL}/auth/register/", json=member_data)
    
    if response.status_code == 201:
        user_data = response.json()
        
        # Check if tokens were provided
        if 'tokens' not in user_data:
            print_test("Member Approval Requirement", True, 
                      "New members don't get immediate tokens (require approval)")
        else:
            print_test("Member Approval Workflow", False, 
                      "New members get immediate access (should require approval)")
            return False
        
        # Check approval status
        is_approved = user_data['user'].get('is_active', True)  # Assuming is_active reflects approval
        if not is_approved:
            print_test("Member Default Approval Status", True, 
                      "New members created with approval required")
        else:
            print_test("Member Default Approval Status", False, 
                      "New members auto-approved (potential security issue)")
    
    return True

def main():
    """Run all security tests"""
    print("üõ°Ô∏è  SOCIETY MANAGEMENT SECURITY VULNERABILITY TEST")
    print("=" * 70)
    print("Testing the FIXED authentication system for security vulnerabilities...")
    
    try:
        all_secure = True
        
        # Test each security aspect
        all_secure &= test_public_registration_vulnerability()
        all_secure &= test_secure_admin_creation()
        all_secure &= test_staff_creation_security()
        all_secure &= test_approval_workflow()
        
        print(f"\n{'='*70}")
        if all_secure:
            print("üéâ SECURITY TEST PASSED: All vulnerabilities have been FIXED!")
            print("‚úÖ Public registration role control: SECURE")
            print("‚úÖ Admin creation access control: SECURE")
            print("‚úÖ Staff creation access control: SECURE")
            print("‚úÖ Member approval workflow: SECURE")
        else:
            print("üö® SECURITY TEST FAILED: Vulnerabilities still exist!")
            print("‚ùå Some security issues need immediate attention!")
        
        print(f"\nüìã SECURITY SUMMARY:")
        print("‚Ä¢ Public /auth/register/ endpoint only creates MEMBER accounts")
        print("‚Ä¢ ADMIN creation requires superuser privileges")
        print("‚Ä¢ STAFF creation requires SUB_ADMIN or ADMIN role")
        print("‚Ä¢ New members require manual approval")
        print("‚Ä¢ Role escalation prevented at API level")
        
        print(f"\nüí° RECOMMENDATIONS:")
        print("‚Ä¢ Regularly audit user roles and permissions")
        print("‚Ä¢ Monitor admin creation activities")
        print("‚Ä¢ Implement rate limiting on registration endpoints")
        print("‚Ä¢ Add additional logging for sensitive operations")
        print("=" * 70)
        
    except requests.exceptions.ConnectionError:
        print("‚ùå ERROR: Cannot connect to Django server")
        print("üí° Make sure the server is running: python manage.py runserver")
    except Exception as e:
        print(f"‚ùå ERROR: {e}")

if __name__ == "__main__":
    main()